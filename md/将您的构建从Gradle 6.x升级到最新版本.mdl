

[ Gradle ](https://docs.gradle.org "Gradle Docs")

User Manual

  * Community Open Community Menu

[ Community Home ](https://gradle.org/)

[ Community Forums ](https://discuss.gradle.org/)

[ Community Plugins ](https://plugins.gradle.org)

  * [Training](https://gradle.com/training/)
  * News Open Community Menu

[ Newsletter ](https://newsletter.gradle.com)

[ Blog ](https://blog.gradle.org)

[ Twitter ](https://twitter.com/gradle)

  * [Enterprise](https://gradle.com)
  * [github](https://github.com/gradle/gradle "Gradle on GitHub")

  * [Docs Home](../userguide/userguide.html)
  * [Samples](../samples/index.html)
  * [Release Notes](../release-notes.html)
  * Gradle API
    * [Javadoc](../javadoc/index.html?overview-summary.html)
    * [Groovy DSL Reference](../dsl/index.html)
    * [Groovy DSL Primer](../userguide/groovy_build_script_primer.html)
    * [Kotlin DSL API](https://gradle.github.io/kotlin-dsl-docs/api/)
    * [Kotlin DSL Primer](../userguide/kotlin_dsl.html)

### User Manual

[ PDF ](../userguide/userguide.pdf)

  * [What is Gradle?](../userguide/what_is_gradle.html)
  * [Getting Started](../userguide/getting_started.html)
  * [Installing Gradle](../userguide/installation.html)
  * Upgrading Gradle...
    * [version 6.X to latest](../userguide/upgrading_version_6.html)
    * [version 5.X to 6.0](../userguide/upgrading_version_5.html)
    * [version 4.X to 5.0](../userguide/upgrading_version_4.html)
    * [Gradle's Feature Lifecycle](../userguide/feature_lifecycle.html)
  * Migrating to Gradle...
    * [from Maven](../userguide/migrating_from_maven.html)
    * [from Ant](../userguide/migrating_from_ant.html)
  * [Compatibility Notes](../userguide/compatibility.html)
  * [Troubleshooting Builds](../userguide/troubleshooting.html)

### Running Gradle Builds

  * Customizing Execution
    * [Configuring the Build Environment](../userguide/build_environment.html)
    * [Configuring the Gradle Daemon](../userguide/gradle_daemon.html)
    * [Using Initialization Scripts](../userguide/init_scripts.html)
  * [Executing Multi-Project Builds](../userguide/intro_multi_project_builds.html)
  * [Inspecting Gradle Builds](https://scans.gradle.com/)
  * Optimizing Build Times
    * [Build Performance Guide](https://guides.gradle.org/performance/)
    * [Enabling and Configuring the Build Cache](../userguide/build_cache.html)
    * [Using the Configuration Cache](../userguide/configuration_cache.html)

### Authoring Gradle Builds

  * Learning the Basics
    * [Introducing the Basics of Build Scripts](../userguide/tutorial_using_tasks.html)
    * [Working with Tasks](../userguide/more_about_tasks.html)
    * [Learning More About Build Scripts](../userguide/writing_build_scripts.html)
    * [Working with Files](../userguide/working_with_files.html)
    * [Using Gradle Plugins](../userguide/plugins.html)
    * [Understanding the Build Lifecycle](../userguide/build_lifecycle.html)
    * [Working with Logging](../userguide/logging.html)
    * [Avoiding Traps](../userguide/potential_traps.html)
  * Authoring Multi-Project Builds
    * [Creating a Basic Multi-Project Build](../userguide/multi_project_builds.html)
    * [Declaring Dependencies between Subprojects](../userguide/declaring_dependencies_between_subprojects.html)
    * [Sharing Build Logic between Subprojects](../userguide/sharing_build_logic_between_subprojects.html)
    * [Fine Tuning the Project Layout](../userguide/fine_tuning_project_layout.html)
    * [Understanding Configuration and Execution](../userguide/multi_project_configuration_and_execution.html)
  * Authoring Sustainable Builds
    * [Organizing Build Logic](../userguide/organizing_gradle_projects.html)
    * [Following Best Practices](../userguide/authoring_maintainable_build_scripts.html)
  * Advanced Techniques
    * [Developing Parallel Tasks](https://guides.gradle.org/using-the-worker-api/)
    * [Testing a Build with TestKit](../userguide/test_kit.html)
    * [Using Ant from Gradle](../userguide/ant.html)

### Authoring JVM Builds

  * [Building Java & JVM projects](../userguide/building_java_projects.html)
  * [Testing Java & JVM projects](../userguide/java_testing.html)
  * [Toolchains for Java projects](../userguide/toolchains.html)
  * [Managing Dependencies](../userguide/dependency_management_for_java_projects.html)
  * JVM Plugins
    * [Java Library Plugin](../userguide/java_library_plugin.html)
    * [Java Application Plugin](../userguide/application_plugin.html)
    * [Java Platform Plugin](../userguide/java_platform_plugin.html)
    * [Groovy Plugin](../userguide/groovy_plugin.html)
    * [Scala Plugin](../userguide/scala_plugin.html)

### Authoring C++/Swift Builds

  * [Building C++ projects](../userguide/building_cpp_projects.html)
  * [Testing C++ projects](../userguide/cpp_testing.html)
  * [Building Swift projects](../userguide/building_swift_projects.html)
  * [Testing Swift projects](../userguide/swift_testing.html)

### Working with Dependencies

  * Learning the Basics
    * [What is Dependency Management?](../userguide/core_dependency_management.html)
    * [Declaring Repositories](../userguide/declaring_repositories.html)
    * [Declaring Dependencies](../userguide/declaring_dependencies.html)
    * [Understanding Library and Application Differences](../userguide/library_vs_application.html)
    * [Viewing and Debugging Dependencies](../userguide/viewing_debugging_dependencies.html)
    * [Understanding Resolution](../userguide/dependency_resolution.html)
    * [Verifying dependencies](../userguide/dependency_verification.html)
  * Declaring Versions
    * [Declaring Versions and Ranges](../userguide/single_versions.html)
    * [Declaring Rich Versions](../userguide/rich_versions.html)
    * [Handling Changing Versions](../userguide/dynamic_versions.html)
    * [Locking Versions](../userguide/dependency_locking.html)
  * Controlling Transitives
    * [Upgrading Versions](../userguide/dependency_constraints.html)
    * [Downgrading and Excluding](../userguide/dependency_downgrade_and_exclude.html)
    * [Sharing Versions](../userguide/platforms.html)
    * [Aligning Dependencies](../userguide/dependency_version_alignment.html)
    * [Handling Mutually Exclusive Dependencies](../userguide/dependency_capability_conflict.html)
    * [Fixing Metadata](../userguide/component_metadata_rules.html)
    * [Customizing Resolution](../userguide/resolution_rules.html)
    * [Preventing accidental upgrades](../userguide/resolution_strategy_tuning.html)
  * Producing and Consuming Variants of Libraries
    * [Declaring Capabilities of a Library](../userguide/component_capabilities.html)
    * [Modeling Feature Variants and Optional Dependencies](../userguide/feature_variants.html)
    * [Understanding Variant Selection](../userguide/variant_model.html)
    * [Declaring Variant Attributes](../userguide/variant_attributes.html)
    * [Sharing Outputs of Projects](../userguide/cross_project_publications.html)
    * [Transforming Artifacts](../userguide/artifact_transforms.html)
  * Working in a Multi-repo Environment
    * [Composing Builds](../userguide/composite_builds.html)
  * Publishing Libraries
    * [Setting up Publishing](../userguide/publishing_setup.html)
    * [Understanding Gradle Module Metadata](../userguide/publishing_gradle_module_metadata.html)
    * [Signing Artifacts](../userguide/publishing_signing.html)
    * [Customizing Publishing](../userguide/publishing_customization.html)
    * [Maven Publish Plugin](../userguide/publishing_maven.html)
    * [Ivy Publish Plugin](../userguide/publishing_ivy.html)
  * [Terminology](../userguide/dependency_management_terminology.html)

### Extending Gradle

  * [Plugin Development Tutorials](https://gradle.org/guides/?q=Plugin%20Development)
  * [Writing Gradle Task Types](../userguide/custom_tasks.html)
  * [Writing Gradle Plugins](../userguide/custom_plugins.html)
  * [Writing Custom Gradle Types](../userguide/custom_gradle_types.html)
  * [Configuring Tasks Lazily](../userguide/lazy_configuration.html)
  * [Using Task Configuration Avoidance](../userguide/task_configuration_avoidance.html)

### Reference

  * [Core Plugins](../userguide/plugin_reference.html)
  * [Command-Line Interface](../userguide/command_line_interface.html)
  * [Gradle & Third-party Tools](../userguide/third_party_integration.html)
  * [The Gradle Wrapper](../userguide/gradle_wrapper.html)
  * [Gradle-managed Directories](../userguide/directory_layout.html)

# Upgrading your build from Gradle 6.x to the latest

version 6.7.1

Contents

  * Upgrading from 6.6
  * Upgrading from 6.5
  * Upgrading from 6.4
  * Upgrading from 6.3
  * Upgrading from 6.2
  * Upgrading from 6.1
  * Upgrading from 6.0 and earlier

This chapter provides the information you need to migrate your Gradle 6.x
builds to the latest Gradle release. For migrating from Gradle 4.x or 5.x, see
the [older migration guide](upgrading_version_5.html#upgrading_version_5)
first.

We recommend the following steps for all users:

  1. Try running `gradle help --scan` and view the [deprecations view](https://gradle.com/enterprise/releases/2018.4/#identify-usages-of-deprecated-gradle-functionality) of the generated build scan.

![Deprecations View of a Gradle Build Scan](img/deprecations.png)

This is so that you can see any deprecation warnings that apply to your build.

Alternatively, you could run `gradle help --warning-mode=all` to see the
deprecations in the console, though it may not report as much detailed
information.

  2. Update your plugins.

Some plugins will break with this new version of Gradle, for example because
they use internal APIs that have been removed or changed. The previous step
will help you identify potential problems by issuing deprecation warnings when
a plugin does try to use a deprecated part of the API.

  3. Run `gradle wrapper --gradle-version 6.7.1` to update the project to 6.7.1.

  4. Try to run the project and debug any errors using the [Troubleshooting Guide](troubleshooting.html#troubleshooting).

## Upgrading from 6.6

### Potential breaking changes

#### buildSrc can now see included builds from the root

Previously, `buildSrc` was built in such a way that included builds were
ignored from the root build.

Since Gradle 6.7, `buildSrc` can see any included build from the root build.
This may cause dependencies to be substituted from an included build in
`buildSrc`. This may also change the order in which some builds are executed
if an included build is needed by `buildSrc`.

#### Updates to default tool integration versions

  * PMD has been updated to [PMD 6.26.0](https://github.com/pmd/pmd/releases/tag/pmd_releases%2F6.26.0).

  * Checkstyle has been updated to [Checkstyle 8.35](https://checkstyle.sourceforge.io/releasenotes.html#Release_8.35).

  * CodeNarc has been updated to [CodeNarc 1.6.1](https://github.com/CodeNarc/CodeNarc/blob/v1.6.1/CHANGELOG.md).

### Deprecations

#### Changing default excludes during the execution phase

Gradle's file trees apply some default exclude patterns for convenience — the
same defaults as Ant in fact. See the [user
manual](working_with_files.html#sec:file_trees) for more information.
Sometimes, Ant's default excludes prove problematic, for example when you want
to include the `.gitignore` in an archive file.

Changing Gradle's default excludes during the execution phase can lead to
correctness problems with up-to-date checks, and is deprecated. You are only
allowed to change Gradle's default excludes in the settings script, see the
[user manual](working_with_files.html#sec:change_default_excludes) for an
example.

#### Using a Configuration directly as a dependency

Gradle allowed instances of `Configuration` to be used directly as
dependencies:

    
    
    dependencies {
        implementation(configurations.myConfiguration)
    }

This behavior is now deprecated as it is confusing: one could expect the
"dependent configuration" to be resolved first and add the result of
resolution as dependencies to the including configuration, which is not the
case. The deprecated version can be replaced with the actual behavior, which
is configuration inheritance:

    
    
    configurations.implementation.extendsFrom(configurations.myConfiguration)

## Upgrading from 6.5

### Potential breaking changes

#### Updates to bundled Gradle dependencies

  * Ant has been updated to [1.10.8](https://downloads.apache.org/ant/RELEASE-NOTES-1.10.8.html).

  * Groovy has been updated to [Groovy 2.5.12](https://groovy-lang.org/changelogs/changelog-2.5.12.html).

#### Dependency substitutions and variant aware dependency resolution

While adding support for expressing [variant
support](resolution_rules.html#sec:variant_aware_substitutions) in dependency
substitutions, a bug fix introduced a behaviour change that some builds may
rely upon. Previously a substituted dependency would still use the
[attributes](variant_attributes.html) of the original selector instead of the
ones from the replacement selector.

With that change, existing substitutions around dependencies with richer
selectors, such as for platform dependencies, will no longer work as they did.
It becomes mandatory to define the variant aware part in the target selector.

You can be affected by this change if you:

  * have dependencies on platforms, like `implementation platform("org:platform:1.0")`

  * _or_ if you specify attributes on dependencies,

  * _and_ you use [resolution rules](resolution_rules.html) on these dependencies.

See the [documentation](resolution_rules.html#sec:variant_aware_substitutions)
for resolving issues if you are impacted.

### Deprecations

No deprecations were made in Gradle 6.6.

## Upgrading from 6.4

### Potential breaking changes

#### Updates to bundled Gradle dependencies

  * Kotlin has been updated to [Kotlin 1.3.72](https://github.com/JetBrains/kotlin/releases/tag/v1.3.72).

  * Groovy has been updated to [Groovy 2.5.11](https://groovy-lang.org/changelogs/changelog-2.5.11.html).

#### Updates to default tool integration versions

  * PMD has been updated to [PMD 6.23.0](https://github.com/pmd/pmd/releases/tag/pmd_releases%2F6.23.0).

### Deprecations

#### Internal class AbstractTask is deprecated

`AbstractTask` is an internal class which is visible on the public API, as a
superclass of public type `DefaultTask`. `AbstractTask` will be removed in
Gradle 7.0, and the following are deprecated in Gradle 6.5:

  * Registering a task whose type is `AbstractTask` or `TaskInternal`. You can remove the task type from the task registration and Gradle will use `DefaultTask` instead.

  * Registering a task whose type is a subclass of `AbstractTask` but not a subclass of `DefaultTask`. You can change the task type to extend `DefaultTask` instead.

  * Using the class `AbstractTask` from plugin code or build scripts. You can change the code to use `DefaultTask` instead.

## Upgrading from 6.3

### Potential breaking changes

#### PMD plugin expects PMD 6.0.0 or higher by default

Gradle 6.4 enabled incremental analysis by default. Incremental analysis is
only available in PMD 6.0.0 or higher. If you want to use an older PMD
version, you need to disable incremental analysis:

    
    
    pmd {
        incrementalAnalysis = false
    }

#### Changes in dependency locking

With Gradle 6.4, the incubating API for [dependency locking
`LockMode`](dependency_locking.html#fine_tuning_dependency_locking_behaviour_with_lock_mode)
has changed. The value is now set via a `Property<LockMode>` instead of a
direct setter. This means that the notation to set the value has to be updated
for the Kotlin DSL:

    
    
    dependencyLocking {
        lockMode.set(LockMode.STRICT)
    }

Users of the Groovy DSL should not be impacted as the notation `lockMode =
LockMode.STRICT` remains valid.

#### Java versions in published metadata

If a Java library is published with Gradle Module Metadata, the information
which Java version it supports is encoded in the `org.gradle.jvm.version`
attribute. By default, this attribute was set to what you configured in
`java.targetCompatibility`. If that was not configured, it was set to the
current Java version running Gradle. Changing the version of a particular
compile task, e.g. `javaCompile.targetCompatibility` had no effect on that
attribute, leading to wrong information if the attribute was not adjusted
manually. This is now fixed and the attribute defaults to the setting of the
compile task that is associated with the sources from which the published jar
is built.

#### Ivy repositories with custom layouts

Gradle versions from 6.0 to 6.3.x included could generate bad Gradle Module
Metadata when publishing on an Ivy repository which had a custom repository
layout. Starting from 6.4, Gradle will no longer publish Gradle Module
Metadata if it detects that you are using a custom repository layout.

#### New properties may shadow variables in build scripts

This release introduces some new properties -- `mainClass`, `mainModule`,
`modularity` -- in different places. Since these are very generic names, there
is a chance that you use one of them in your build scripts as variable name. A
new property might then shadow one of your variables in an undesired way,
leading to a build failure where the property is accessed instead of the local
variable with the same name. You can fix it by renaming the corresponding
variable in the build script.

Affected is configuration code inside the `application {}` and `java {}`
configuration blocks, inside a java execution setup with `project.javaexec
{}`, and inside various task configurations (`JavaExec`, `CreateStartScripts`,
`JavaCompile`, `Test`, `Javadoc`).

#### Updates to bundled Gradle dependencies

  * Kotlin has been updated to [Kotlin 1.3.71](https://github.com/JetBrains/kotlin/releases/tag/v1.3.71).

### Deprecations

There were no deprecations between Gradle 6.3 and 6.4.

## Upgrading from 6.2

### Potential breaking changes

#### Fewer dependencies available in IDEA

Gradle no longer includes the annotation processor classpath as provided
dependencies in IDEA. The dependencies IDEA sees at compile time are the same
as what Gradle sees after resolving the compile classpath (configuration named
`compileClasspath`). This prevents the leakage of annotation processor
dependencies into the project's code.

Before Gradle introduced [incremental annotation processing
support](java_plugin.html#sec:incremental_annotation_processing), IDEA
required all annotation processors to be on the compilation classpath to be
able to run annotation processing when compiling in IDEA. This is no longer
necessary because Gradle has a separate [annotation processor
classpath](java_plugin.html#tab:configurations). The dependencies for
annotation processors are not added to an IDEA module's classpath when a
Gradle project with annotation processors is imported.

#### Updates to bundled Gradle dependencies

  * Kotlin has been updated to [Kotlin 1.3.70](https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/).

  * Groovy has been updated to [Groovy 2.5.10](http://groovy-lang.org/changelogs/changelog-2.5.10.html).

#### Updates to default tool integration versions

  * PMD has been updated to [PMD 6.21.0](https://pmd.github.io/pmd-6.21.0/pmd_release_notes.html#24-january-2020---6210).

  * CodeNarc has been updated to [CodeNarc 1.5](https://github.com/CodeNarc/CodeNarc/blob/v1.5/CHANGELOG.md#version-15----nov-2019).

#### Rich console support removed for some 32-bit operating systems

Gradle 6.3 does not support the [rich
console](command_line_interface.html#sec:rich_console) for 32-bit Unix systems
and for old FreeBSD versions (older than FreeBSD 10). Microsoft Windows 32-bit
is unaffected.

Gradle will continue building projects on 32-bit systems but will no longer
show the rich console.

### Deprecations

#### Using default and archives configurations

Almost every Gradle project has the _default_ and _archives_ configurations
which are added by the _base_ plugin. These configurations are no longer used
in modern Gradle builds that use [variant aware dependency
management](variant_model.html) and the [new publishing
plugins](publishing_setup.html).

While the configurations will stay in Gradle for backwards compatibility for
now, using them to declare dependencies or to resolve dependencies is now
deprecated.

Resolving these configurations was never an intended use case and only
possible because in earlier Gradle versions _every_ configuration was
resolvable. For declaring dependencies, please use the configurations provided
by the plugins you use, for example by the [Java Library
plugin](java_library_plugin.html#sec:java_library_configurations_graph).

## Upgrading from 6.1

### Potential breaking changes

#### Compile and runtime classpath now request library variants by default

A classpath in a JVM project now explicitly requests the
`org.gradle.category=library` attribute. This leads to clearer error messages
if a certain library cannot be used. For example, when the library does not
support the required Java version. The practical effect is that now all
[platform
dependencies](java_platform_plugin.html#sec:java_platform_consumption) have to
be declared as such. Before, platform dependencies also worked, accidentally,
when the `platform()` keyword was omitted for local platforms or platforms
published with Gradle Module Metadata.

#### Properties from project root `gradle.properties` leaking into `buildSrc`
and included builds

There was a regression in Gradle 6.2 and Gradle 6.2.1 that caused Gradle
properties set in the project root `gradle.properties` file to leak into the
`buildSrc` build and any builds included by the root.

This could cause your build to start failing if the `buildSrc` build or an
included build suddenly found an unexpected or incompatible value for a
property coming from the project root `gradle.properties` file.

The regression has been fixed in Gradle 6.2.2.

### Deprecations

There were no deprecations between Gradle 6.1 and 6.2.

## Upgrading from 6.0 and earlier

### Deprecations

#### Querying a mapped output property of a task before the task has completed

Querying the value of a mapped output property before the task has completed
can cause strange build failures because it indicates stale or non-existent
outputs may be used by mistake. This behavior is deprecated and will emit a
deprecation warning. This will become an error in Gradle 7.0.

The following example demonstrates this problem where the Producer's output
file is parsed before the Producer executes:

    
    
    class Consumer extends DefaultTask {
        @Input
        final Property<Integer> threadPoolSize = ...
    }
    
    class Producer extends DefaultTask {
        @OutputFile
        final RegularFileProperty outputFile = ...
    }
    
    // threadPoolSize is read from the producer's outputFile
    consumer.threadPoolSize = producer.outputFile.map { it.text.toInteger() }
    
    // Emits deprecation warning
    println("thread pool size = " + consumer.threadPoolSize.get())

Querying the value of `consumer.threadPoolSize` will produce a deprecation
warning if done prior to `producer` completing, as the output file has not yet
been generated.

#### Discontinued methods

The following methods have been discontinued and should no longer be used.
They will be removed in Gradle 7.0.

  * `BasePluginConvention.setProject(ProjectInternal)`

  * `BasePluginConvention.getProject()`

  * `StartParameter.useEmptySettings()`

  * `StartParameter.isUseEmptySettings()`

#### Alternative JVM plugins (a.k.a "Software Model")

A set of alternative plugins for Java and Scala development were introduced in
Gradle 2.x as an experiment based on the "software model". These plugins are
now deprecated and will eventually be removed. If you are still using one of
these old plugins (`java-lang`, `scala-lang`, `jvm-component`, `jvm-
resources`, `junit-test-suite`) please consult the documentation on [Building
Java & JVM projects](building_java_projects.html) to determine which of the
stable JVM plugins are appropriate for your project.

### Potential breaking changes

#### `ProjectLayout` is no longer available to worker actions as a service

In Gradle 6.0, the `ProjectLayout` service was made available to worker
actions via service injection. This service allowed for mutable state to leak
into a worker action and introduced a way for dependencies to go undeclared in
the worker action.

`ProjectLayout` has been removed from the available services. Worker actions
that were using `ProjectLayout` should switch to injecting the
`projectDirectory` or `buildDirectory` as a parameter instead.

#### Updates to bundled Gradle dependencies

  * Kotlin has been updated to [Kotlin 1.3.61](https://blog.jetbrains.com/kotlin/2019/11/kotlin-1-3-60-released/).

#### Updates to default tool integration versions

  * Checkstyle has been updated to [Checkstyle 8.27](https://checkstyle.org/releasenotes.html#Release_8.27).

  * PMD has been updated to [PMD 6.20.0](https://pmd.github.io/pmd-6.20.0/pmd_release_notes.html#29-november-2019---6200).

#### Publishing Spring Boot applications

Starting from Gradle 6.2, Gradle performs a sanity check before uploading, to
make sure you don't upload stale files (files produced by another build). This
introduces a problem with Spring Boot applications which are uploaded using
the `components.java` component:

    
    
    Artifact my-application-0.0.1-SNAPSHOT.jar wasn't produced by this build.

This is caused by the fact that the main `jar` task is disabled by the Spring
Boot application, and the component expects it to be present. Because the
`bootJar` task uses the _same file_ as the main `jar` task by default,
previous releases of Gradle would either:

  * publish a stale `bootJar` artifact

  * or fail if the `bootJar` task hasn't been called previously

A workaround is to tell Gradle what to upload. If you want to upload the
`bootJar`, then you need to configure the outgoing configurations to do this:

    
    
    configurations {
       [apiElements, runtimeElements].each {
           it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
           it.outgoing.artifact(bootJar)
       }
    }

Alternatively, you might want to re-enable the `jar` task, and add the
`bootJar` with a different classifier.

    
    
    jar {
       enabled = true
    }
    
    bootJar {
       classifier = 'application'
    }

**Docs**

  * [User Manual](/userguide/userguide.html)
  * [DSL Reference](/dsl/)
  * [Release Notes](/release-notes.html)
  * [Javadoc](/javadoc/)

**News**

  * [Blog](https://blog.gradle.org/)
  * [Newsletter](https://newsletter.gradle.com/)
  * [Twitter](https://twitter.com/gradle)
  * [Status Page](https://status.gradle.com/)

**Products**

  * [Build Scans](https://gradle.com/build-scans/)
  * [Build Cache](https://gradle.com/build-cache/)
  * [Enterprise Docs](https://gradle.com/enterprise/resources/)

**Get Help**

  * [Forums](https://discuss.gradle.org/c/help-discuss)
  * [GitHub](https://github.com/gradle/)
  * [Training](https://gradle.com/training/)
  * [Services](https://gradle.org/services/)

##### Stay `UP-TO-DATE` on new features and news

By entering your email, you agree to our
[Terms](https://gradle.com/legal/terms-of-service/) and [Privacy
Policy](https://gradle.com/legal/privacy/), including receipt of emails. You
can unsubscribe at any time.

Subscribe

© [Gradle Inc.](https://gradle.com) 2020 All rights reserved.

[ gradle ](/)

[Careers](https://gradle.com/careers/) |
[Privacy](https://gradle.com/legal/privacy/) | [Terms of
Service](https://gradle.com/legal/terms-of-service/) |
[Contact](https://gradle.org/contact/)

